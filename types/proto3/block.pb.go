// Code generated by protoc-gen-go. DO NOT EDIT.
// source: block.proto

/*
Package proto3 is a generated protocol buffer package.

It is generated from these files:
	block.proto

It has these top-level messages:
	PartSetHeader
	BlockID
	Header
	Timestamp
*/
package proto3

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PartSetHeader struct {
	Total int32  `protobuf:"zigzag32,1,opt,name=Total" json:"Total,omitempty"`
	Hash  []byte `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *PartSetHeader) Reset()                    { *m = PartSetHeader{} }
func (m *PartSetHeader) String() string            { return proto.CompactTextString(m) }
func (*PartSetHeader) ProtoMessage()               {}
func (*PartSetHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PartSetHeader) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PartSetHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type BlockID struct {
	Hash        []byte         `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	PartsHeader *PartSetHeader `protobuf:"bytes,2,opt,name=PartsHeader" json:"PartsHeader,omitempty"`
}

func (m *BlockID) Reset()                    { *m = BlockID{} }
func (m *BlockID) String() string            { return proto.CompactTextString(m) }
func (*BlockID) ProtoMessage()               {}
func (*BlockID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlockID) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockID) GetPartsHeader() *PartSetHeader {
	if m != nil {
		return m.PartsHeader
	}
	return nil
}

type Header struct {
	// basic block info
	ChainID string     `protobuf:"bytes,1,opt,name=ChainID" json:"ChainID,omitempty"`
	Height  int64      `protobuf:"zigzag64,2,opt,name=Height" json:"Height,omitempty"`
	Time    *Timestamp `protobuf:"bytes,3,opt,name=Time" json:"Time,omitempty"`
	NumTxs  int64      `protobuf:"zigzag64,4,opt,name=NumTxs" json:"NumTxs,omitempty"`
	// prev block info
	LastBlockID *BlockID `protobuf:"bytes,5,opt,name=LastBlockID" json:"LastBlockID,omitempty"`
	TotalTxs    int64    `protobuf:"zigzag64,6,opt,name=TotalTxs" json:"TotalTxs,omitempty"`
	// hashes of block data
	LastCommitHash []byte `protobuf:"bytes,7,opt,name=LastCommitHash,proto3" json:"LastCommitHash,omitempty"`
	DataHash       []byte `protobuf:"bytes,8,opt,name=DataHash,proto3" json:"DataHash,omitempty"`
	// hashes from the app output from the prev block
	ValidatorsHash  []byte `protobuf:"bytes,9,opt,name=ValidatorsHash,proto3" json:"ValidatorsHash,omitempty"`
	ConsensusHash   []byte `protobuf:"bytes,10,opt,name=ConsensusHash,proto3" json:"ConsensusHash,omitempty"`
	AppHash         []byte `protobuf:"bytes,11,opt,name=AppHash,proto3" json:"AppHash,omitempty"`
	LastResultsHash []byte `protobuf:"bytes,12,opt,name=LastResultsHash,proto3" json:"LastResultsHash,omitempty"`
	// consensus info
	EvidenceHash []byte `protobuf:"bytes,13,opt,name=EvidenceHash,proto3" json:"EvidenceHash,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Header) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *Header) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Header) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Header) GetNumTxs() int64 {
	if m != nil {
		return m.NumTxs
	}
	return 0
}

func (m *Header) GetLastBlockID() *BlockID {
	if m != nil {
		return m.LastBlockID
	}
	return nil
}

func (m *Header) GetTotalTxs() int64 {
	if m != nil {
		return m.TotalTxs
	}
	return 0
}

func (m *Header) GetLastCommitHash() []byte {
	if m != nil {
		return m.LastCommitHash
	}
	return nil
}

func (m *Header) GetDataHash() []byte {
	if m != nil {
		return m.DataHash
	}
	return nil
}

func (m *Header) GetValidatorsHash() []byte {
	if m != nil {
		return m.ValidatorsHash
	}
	return nil
}

func (m *Header) GetConsensusHash() []byte {
	if m != nil {
		return m.ConsensusHash
	}
	return nil
}

func (m *Header) GetAppHash() []byte {
	if m != nil {
		return m.AppHash
	}
	return nil
}

func (m *Header) GetLastResultsHash() []byte {
	if m != nil {
		return m.LastResultsHash
	}
	return nil
}

func (m *Header) GetEvidenceHash() []byte {
	if m != nil {
		return m.EvidenceHash
	}
	return nil
}

type Timestamp struct {
	Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	Nanos   int32 `protobuf:"varint,2,opt,name=nanos" json:"nanos,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Timestamp) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Timestamp) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

func init() {
	proto.RegisterType((*PartSetHeader)(nil), "proto3.PartSetHeader")
	proto.RegisterType((*BlockID)(nil), "proto3.BlockID")
	proto.RegisterType((*Header)(nil), "proto3.Header")
	proto.RegisterType((*Timestamp)(nil), "proto3.Timestamp")
}

func init() { proto.RegisterFile("block.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x5f, 0x4b, 0xeb, 0x40,
	0x10, 0xc5, 0xc9, 0xed, 0xff, 0x49, 0x7b, 0x4b, 0x87, 0x7b, 0x25, 0xf8, 0x54, 0x82, 0x4a, 0x9f,
	0x0a, 0xda, 0x07, 0x11, 0x9f, 0xb4, 0x15, 0x5a, 0x10, 0x91, 0xb5, 0xf4, 0x7d, 0xdb, 0x2c, 0x36,
	0x98, 0xec, 0x86, 0xec, 0x56, 0xfc, 0x7c, 0x7e, 0x32, 0xd9, 0xd9, 0x24, 0x36, 0x7d, 0x6a, 0xcf,
	0x99, 0x33, 0xbf, 0xd9, 0xcc, 0x2e, 0xf8, 0xdb, 0x44, 0xed, 0x3e, 0xa6, 0x59, 0xae, 0x8c, 0xc2,
	0x36, 0xfd, 0xcc, 0xc2, 0x3b, 0x18, 0xbc, 0xf2, 0xdc, 0xbc, 0x09, 0xb3, 0x14, 0x3c, 0x12, 0x39,
	0xfe, 0x83, 0xd6, 0x5a, 0x19, 0x9e, 0x04, 0xde, 0xd8, 0x9b, 0x8c, 0x98, 0x13, 0x88, 0xd0, 0x5c,
	0x72, 0xbd, 0x0f, 0xfe, 0x8c, 0xbd, 0x49, 0x9f, 0xd1, 0xff, 0x70, 0x03, 0x9d, 0x47, 0x4b, 0x5c,
	0x2d, 0xaa, 0xb2, 0xf7, 0x5b, 0xc6, 0x5b, 0xf0, 0x2d, 0x59, 0x3b, 0x2e, 0x75, 0xfa, 0x37, 0xff,
	0xdd, 0xf8, 0xd9, 0xb4, 0x36, 0x94, 0x1d, 0x27, 0xc3, 0xef, 0x06, 0xb4, 0x8b, 0xc3, 0x04, 0xd0,
	0x99, 0xef, 0x79, 0x2c, 0x57, 0x0b, 0x42, 0xf7, 0x58, 0x29, 0xf1, 0xcc, 0x66, 0xe2, 0xf7, 0xbd,
	0x21, 0x30, 0xb2, 0x42, 0xe1, 0x25, 0x34, 0xd7, 0x71, 0x2a, 0x82, 0x06, 0x8d, 0x1b, 0x95, 0xe3,
	0xac, 0xa7, 0x0d, 0x4f, 0x33, 0x46, 0x65, 0xdb, 0xfe, 0x72, 0x48, 0xd7, 0x5f, 0x3a, 0x68, 0xba,
	0x76, 0xa7, 0xf0, 0x1a, 0xfc, 0x67, 0xae, 0x4d, 0xf1, 0x5d, 0x41, 0x8b, 0x28, 0xc3, 0x92, 0x52,
	0xd8, 0xec, 0x38, 0x83, 0xe7, 0xd0, 0xa5, 0x1d, 0x59, 0x58, 0x9b, 0x60, 0x95, 0xc6, 0x2b, 0xf8,
	0x6b, 0xa3, 0x73, 0x95, 0xa6, 0xb1, 0xa1, 0x0d, 0x75, 0x68, 0x43, 0x27, 0xae, 0x65, 0x2c, 0xb8,
	0xe1, 0x94, 0xe8, 0x52, 0xa2, 0xd2, 0x96, 0xb1, 0xe1, 0x49, 0x1c, 0x71, 0xa3, 0x72, 0x4d, 0x89,
	0x9e, 0x63, 0xd4, 0x5d, 0xbc, 0x80, 0xc1, 0x5c, 0x49, 0x2d, 0xa4, 0x3e, 0xb8, 0x18, 0x50, 0xac,
	0x6e, 0xda, 0x8d, 0x3e, 0x64, 0x19, 0xd5, 0x7d, 0xaa, 0x97, 0x12, 0x27, 0x30, 0xb4, 0xa7, 0x62,
	0x42, 0x1f, 0x12, 0xe3, 0x08, 0x7d, 0x4a, 0x9c, 0xda, 0x18, 0x42, 0xff, 0xe9, 0x33, 0x8e, 0x84,
	0xdc, 0x09, 0x8a, 0x0d, 0x28, 0x56, 0xf3, 0xc2, 0x7b, 0xe8, 0x55, 0x3b, 0xb7, 0x43, 0xb5, 0xd8,
	0x29, 0x19, 0x69, 0xba, 0xc6, 0x06, 0x2b, 0xa5, 0x7d, 0x6d, 0x92, 0x4b, 0xa5, 0xe9, 0x16, 0x5b,
	0xcc, 0x89, 0x6d, 0xf1, 0x38, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x31, 0x7d, 0xc7, 0x97, 0xb2,
	0x02, 0x00, 0x00,
}
