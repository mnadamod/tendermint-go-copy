// Code generated by protoc-gen-go.
// source: types/types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types/types.proto

It has these top-level messages:
	Request
	Response
	Validator
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MessageType int32

const (
	MessageType_NullMessage MessageType = 0
	MessageType_Echo        MessageType = 1
	MessageType_Flush       MessageType = 2
	MessageType_Info        MessageType = 3
	MessageType_SetOption   MessageType = 4
	MessageType_Exception   MessageType = 5
	MessageType_AppendTx    MessageType = 17
	MessageType_CheckTx     MessageType = 18
	MessageType_Commit      MessageType = 19
	MessageType_Query       MessageType = 20
	MessageType_InitChain   MessageType = 21
	MessageType_BeginBlock  MessageType = 22
	MessageType_EndBlock    MessageType = 23
)

var MessageType_name = map[int32]string{
	0:  "NullMessage",
	1:  "Echo",
	2:  "Flush",
	3:  "Info",
	4:  "SetOption",
	5:  "Exception",
	17: "AppendTx",
	18: "CheckTx",
	19: "Commit",
	20: "Query",
	21: "InitChain",
	22: "BeginBlock",
	23: "EndBlock",
}
var MessageType_value = map[string]int32{
	"NullMessage": 0,
	"Echo":        1,
	"Flush":       2,
	"Info":        3,
	"SetOption":   4,
	"Exception":   5,
	"AppendTx":    17,
	"CheckTx":     18,
	"Commit":      19,
	"Query":       20,
	"InitChain":   21,
	"BeginBlock":  22,
	"EndBlock":    23,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CodeType int32

const (
	CodeType_OK CodeType = 0
	// General response codes, 0 ~ 99
	CodeType_InternalError     CodeType = 1
	CodeType_EncodingError     CodeType = 2
	CodeType_BadNonce          CodeType = 3
	CodeType_Unauthorized      CodeType = 4
	CodeType_InsufficientFunds CodeType = 5
	CodeType_UnknownRequest    CodeType = 6
	// Reserved for basecoin, 100 ~ 199
	CodeType_BaseDuplicateAddress     CodeType = 101
	CodeType_BaseEncodingError        CodeType = 102
	CodeType_BaseInsufficientFees     CodeType = 103
	CodeType_BaseInsufficientFunds    CodeType = 104
	CodeType_BaseInsufficientGasPrice CodeType = 105
	CodeType_BaseInvalidAddress       CodeType = 106
	CodeType_BaseInvalidAmount        CodeType = 107
	CodeType_BaseInvalidPubKey        CodeType = 108
	CodeType_BaseInvalidSequence      CodeType = 109
	CodeType_BaseInvalidSignature     CodeType = 110
	CodeType_BaseUnknownAddress       CodeType = 111
	CodeType_BaseUnknownPubKey        CodeType = 112
	CodeType_BaseUnknownPlugin        CodeType = 113
	// Reserved for governance, 200 ~ 299
	CodeType_GovUnknownEntity      CodeType = 201
	CodeType_GovUnknownGroup       CodeType = 202
	CodeType_GovUnknownProposal    CodeType = 203
	CodeType_GovDuplicateGroup     CodeType = 204
	CodeType_GovDuplicateMember    CodeType = 205
	CodeType_GovDuplicateProposal  CodeType = 206
	CodeType_GovDuplicateVote      CodeType = 207
	CodeType_GovInvalidMember      CodeType = 208
	CodeType_GovInvalidVote        CodeType = 209
	CodeType_GovInvalidVotingPower CodeType = 210
)

var CodeType_name = map[int32]string{
	0:   "OK",
	1:   "InternalError",
	2:   "EncodingError",
	3:   "BadNonce",
	4:   "Unauthorized",
	5:   "InsufficientFunds",
	6:   "UnknownRequest",
	101: "BaseDuplicateAddress",
	102: "BaseEncodingError",
	103: "BaseInsufficientFees",
	104: "BaseInsufficientFunds",
	105: "BaseInsufficientGasPrice",
	106: "BaseInvalidAddress",
	107: "BaseInvalidAmount",
	108: "BaseInvalidPubKey",
	109: "BaseInvalidSequence",
	110: "BaseInvalidSignature",
	111: "BaseUnknownAddress",
	112: "BaseUnknownPubKey",
	113: "BaseUnknownPlugin",
	201: "GovUnknownEntity",
	202: "GovUnknownGroup",
	203: "GovUnknownProposal",
	204: "GovDuplicateGroup",
	205: "GovDuplicateMember",
	206: "GovDuplicateProposal",
	207: "GovDuplicateVote",
	208: "GovInvalidMember",
	209: "GovInvalidVote",
	210: "GovInvalidVotingPower",
}
var CodeType_value = map[string]int32{
	"OK":                       0,
	"InternalError":            1,
	"EncodingError":            2,
	"BadNonce":                 3,
	"Unauthorized":             4,
	"InsufficientFunds":        5,
	"UnknownRequest":           6,
	"BaseDuplicateAddress":     101,
	"BaseEncodingError":        102,
	"BaseInsufficientFees":     103,
	"BaseInsufficientFunds":    104,
	"BaseInsufficientGasPrice": 105,
	"BaseInvalidAddress":       106,
	"BaseInvalidAmount":        107,
	"BaseInvalidPubKey":        108,
	"BaseInvalidSequence":      109,
	"BaseInvalidSignature":     110,
	"BaseUnknownAddress":       111,
	"BaseUnknownPubKey":        112,
	"BaseUnknownPlugin":        113,
	"GovUnknownEntity":         201,
	"GovUnknownGroup":          202,
	"GovUnknownProposal":       203,
	"GovDuplicateGroup":        204,
	"GovDuplicateMember":       205,
	"GovDuplicateProposal":     206,
	"GovDuplicateVote":         207,
	"GovInvalidMember":         208,
	"GovInvalidVote":           209,
	"GovInvalidVotingPower":    210,
}

func (x CodeType) String() string {
	return proto.EnumName(CodeType_name, int32(x))
}
func (CodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Request struct {
	Type       MessageType  `protobuf:"varint,1,opt,name=type,enum=types.MessageType" json:"type,omitempty"`
	Data       []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Key        string       `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Value      string       `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	Validators []*Validator `protobuf:"bytes,5,rep,name=validators" json:"validators,omitempty"`
	Height     uint64       `protobuf:"varint,6,opt,name=height" json:"height,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type Response struct {
	Type       MessageType  `protobuf:"varint,1,opt,name=type,enum=types.MessageType" json:"type,omitempty"`
	Data       []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Code       CodeType     `protobuf:"varint,3,opt,name=code,enum=types.CodeType" json:"code,omitempty"`
	Error      string       `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	Log        string       `protobuf:"bytes,5,opt,name=log" json:"log,omitempty"`
	Validators []*Validator `protobuf:"bytes,6,rep,name=validators" json:"validators,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type Validator struct {
	PubKey []byte `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Power  uint64 `protobuf:"varint,2,opt,name=power" json:"power,omitempty"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Request)(nil), "types.Request")
	proto.RegisterType((*Response)(nil), "types.Response")
	proto.RegisterType((*Validator)(nil), "types.Validator")
	proto.RegisterEnum("types.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("types.CodeType", CodeType_name, CodeType_value)
}

var fileDescriptor0 = []byte{
	// 722 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x53, 0xeb, 0x36,
	0x14, 0xad, 0x13, 0x27, 0x24, 0x37, 0x10, 0x14, 0x91, 0x80, 0xdb, 0xe9, 0x82, 0xa1, 0x33, 0x1d,
	0x86, 0x05, 0xed, 0xd0, 0x55, 0x97, 0x24, 0x0d, 0x4c, 0x86, 0x01, 0x52, 0xf3, 0xb1, 0x37, 0xf6,
	0x4d, 0xac, 0xc6, 0x91, 0x8c, 0x2d, 0x03, 0xe9, 0x1f, 0x63, 0xa6, 0xfb, 0x2e, 0xde, 0xf7, 0xc7,
	0x2f, 0x7a, 0x92, 0x3f, 0x92, 0x90, 0xb7, 0x78, 0x8b, 0xb7, 0xc9, 0xe8, 0x9c, 0x23, 0xdd, 0x7b,
	0xce, 0x95, 0x62, 0x68, 0xc9, 0x59, 0x88, 0xf1, 0x6f, 0xe9, 0xef, 0x61, 0x18, 0x09, 0x29, 0x68,
	0x25, 0x05, 0x7b, 0xcf, 0x06, 0xac, 0xd9, 0x78, 0x9f, 0x60, 0x2c, 0xe9, 0xaf, 0x60, 0x6a, 0xd2,
	0x32, 0x76, 0x8d, 0xfd, 0xe6, 0x11, 0x3d, 0xcc, 0xb6, 0x9f, 0x63, 0x1c, 0x3b, 0x63, 0xbc, 0x56,
	0xc0, 0x4e, 0x75, 0x4a, 0xc1, 0xf4, 0x1c, 0xe9, 0x58, 0x25, 0xb5, 0x6f, 0xdd, 0x4e, 0xd7, 0x94,
	0x40, 0x79, 0x82, 0x33, 0xab, 0xac, 0xa8, 0xba, 0xad, 0x97, 0xb4, 0x0d, 0x95, 0x07, 0x27, 0x48,
	0xd0, 0x32, 0x53, 0x2e, 0x03, 0xf4, 0x77, 0x00, 0xb5, 0x60, 0xea, 0x8c, 0x88, 0x62, 0xab, 0xb2,
	0x5b, 0xde, 0x6f, 0x1c, 0x91, 0xbc, 0xd3, 0x6d, 0x21, 0xd8, 0x4b, 0x7b, 0xe8, 0x36, 0x54, 0x7d,
	0x64, 0x63, 0x5f, 0x5a, 0x55, 0x55, 0xc8, 0xb4, 0x73, 0xb4, 0xf7, 0xbf, 0x01, 0x35, 0x1b, 0xe3,
	0x50, 0xf0, 0x18, 0xbf, 0xcb, 0xfa, 0x2f, 0x60, 0xba, 0xc2, 0xc3, 0xd4, 0x7b, 0xf3, 0x68, 0x33,
	0x3f, 0xdb, 0x53, 0x54, 0x76, 0x50, 0x8b, 0x3a, 0x0d, 0x46, 0x91, 0x88, 0x8a, 0x34, 0x29, 0xd0,
	0xa9, 0x03, 0x31, 0x56, 0x31, 0xd2, 0xd4, 0x6a, 0xb9, 0x92, 0xaf, 0xfa, 0xed, 0x7c, 0x7b, 0x7f,
	0x42, 0x7d, 0x2e, 0xe8, 0xb0, 0x61, 0x72, 0x77, 0xa6, 0x26, 0x69, 0xa4, 0x0e, 0x73, 0xa4, 0xdb,
	0x87, 0xe2, 0x11, 0xa3, 0xd4, 0xb8, 0x69, 0x67, 0xe0, 0xe0, 0x3f, 0x03, 0x1a, 0x4b, 0x19, 0xe9,
	0x26, 0x34, 0x2e, 0x92, 0x20, 0xc8, 0x29, 0xf2, 0x03, 0xad, 0x81, 0xd9, 0x77, 0x7d, 0x41, 0x0c,
	0x5a, 0x87, 0xca, 0x49, 0x90, 0xc4, 0x3e, 0x29, 0x69, 0x72, 0xc0, 0x47, 0x82, 0x94, 0xe9, 0x06,
	0xd4, 0xaf, 0x50, 0x5e, 0x86, 0x92, 0x09, 0x4e, 0x4c, 0x0d, 0xfb, 0x4f, 0x2e, 0x66, 0xb0, 0x42,
	0xd7, 0xa1, 0x76, 0x1c, 0x86, 0xc8, 0xbd, 0xeb, 0x27, 0xd2, 0xa2, 0x0d, 0x58, 0xeb, 0xf9, 0xe8,
	0x4e, 0x14, 0x50, 0x53, 0x84, 0x6a, 0x4f, 0x4c, 0xa7, 0x4c, 0x92, 0x2d, 0x5d, 0xf9, 0xef, 0x04,
	0xa3, 0x19, 0x69, 0xeb, 0x02, 0x03, 0xce, 0x64, 0xcf, 0x77, 0x18, 0x27, 0x1d, 0xda, 0x04, 0xe8,
	0xe2, 0x98, 0xf1, 0x6e, 0x20, 0xdc, 0x09, 0xd9, 0xd6, 0x05, 0xfb, 0xdc, 0xcb, 0xd0, 0xce, 0xc1,
	0x73, 0x05, 0x6a, 0xc5, 0x90, 0x69, 0x15, 0x4a, 0x97, 0x67, 0xca, 0x70, 0x0b, 0x36, 0x06, 0x5c,
	0x62, 0xc4, 0x9d, 0xa0, 0xaf, 0x27, 0xac, 0x9c, 0x2b, 0xaa, 0xcf, 0xd5, 0x1d, 0x30, 0x3e, 0xce,
	0xa8, 0x92, 0x2e, 0xd4, 0x75, 0xbc, 0x0b, 0xc1, 0x5d, 0x54, 0x29, 0x08, 0xac, 0xdf, 0x70, 0x27,
	0x91, 0xbe, 0x88, 0xd8, 0xbf, 0xe8, 0xa9, 0x20, 0x1d, 0x68, 0x0d, 0x78, 0x9c, 0x8c, 0x46, 0xcc,
	0x65, 0xc8, 0xe5, 0x49, 0xc2, 0xbd, 0x58, 0x05, 0xa2, 0xd0, 0xbc, 0xe1, 0x13, 0x2e, 0x1e, 0x79,
	0xfe, 0xe2, 0x49, 0x95, 0x5a, 0xd0, 0xee, 0x3a, 0x31, 0xfe, 0x95, 0x84, 0x01, 0x73, 0x1d, 0x89,
	0xc7, 0x9e, 0x17, 0xa9, 0xf1, 0x11, 0xd4, 0x45, 0xb4, 0xf2, 0xb2, 0xf7, 0xa8, 0x38, 0xf0, 0xa2,
	0x3e, 0x62, 0x4c, 0xc6, 0xf4, 0x47, 0xe8, 0x7c, 0xa5, 0xa4, 0x9d, 0x7d, 0xfa, 0x33, 0x58, 0xab,
	0xd2, 0xa9, 0x13, 0x0f, 0x23, 0xa6, 0x02, 0x30, 0x75, 0xe9, 0x34, 0x53, 0xd3, 0x57, 0x51, 0x38,
	0xf8, 0xa7, 0x70, 0x50, 0xf0, 0x53, 0x91, 0x70, 0x49, 0x26, 0x2b, 0xf4, 0x30, 0x7d, 0x20, 0x24,
	0xa0, 0x3b, 0xb0, 0xb5, 0x44, 0x5f, 0xe9, 0x84, 0x7a, 0x3e, 0xd3, 0x85, 0xe3, 0x4c, 0x60, 0x63,
	0xee, 0xc8, 0x24, 0x42, 0xc2, 0x8b, 0xc6, 0xf9, 0x50, 0x8a, 0xc6, 0xa2, 0xe8, 0x90, 0xf3, 0x79,
	0x87, 0x70, 0x95, 0x0e, 0x12, 0x75, 0xb7, 0xe4, 0x5e, 0xd1, 0xe4, 0x54, 0x3c, 0xe4, 0x6c, 0x9f,
	0x4b, 0x26, 0x67, 0xe4, 0x95, 0xa1, 0x9e, 0xec, 0xe6, 0x82, 0x3e, 0x8d, 0x44, 0x12, 0x92, 0xd7,
	0x86, 0x72, 0x49, 0x17, 0xec, 0x30, 0x12, 0xa1, 0x88, 0x9d, 0x80, 0xbc, 0x31, 0x94, 0x97, 0x96,
	0x12, 0xe6, 0xf7, 0x90, 0x1d, 0x78, 0x5b, 0x1c, 0x98, 0xf3, 0xe7, 0x38, 0xbd, 0xc3, 0x88, 0xbc,
	0x33, 0xd4, 0xb8, 0xdb, 0xcb, 0xc2, 0xbc, 0xd6, 0x7b, 0x23, 0x77, 0x34, 0x97, 0x6e, 0x85, 0x44,
	0xf2, 0xa1, 0xa0, 0xf3, 0x39, 0xe4, 0x85, 0x3e, 0x1a, 0x74, 0x0b, 0x9a, 0x0b, 0x3a, 0xdd, 0xfb,
	0xc9, 0xa0, 0x3f, 0x41, 0xe7, 0x05, 0xa9, 0x5e, 0xc0, 0x50, 0xff, 0xe7, 0xc8, 0x67, 0xe3, 0xae,
	0x9a, 0x7e, 0x41, 0xff, 0xf8, 0x12, 0x00, 0x00, 0xff, 0xff, 0x65, 0x9a, 0x2e, 0x13, 0x56, 0x05,
	0x00, 0x00,
}
